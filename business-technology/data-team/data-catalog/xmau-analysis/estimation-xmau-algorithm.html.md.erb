---
layout: handbook-page-toc
title: "Estimation Algorithm"
---

## On this page
{:.no_toc}

- TOC
{:toc}

---

## Estimation Algorithm

GitLab Self-Managed customers have the option to enable or disable the GitLab usage ping, which returns to GitLab user activty and other usage metrics for analysis. Some customers choose to send this data knowing that it helps GitLab to prioritize and design lovable features. Other customers, for a variety of reasons, choose not to participate. Therefore, any analysis of user-level data is limited to GitLab.com customers and those Self-Managed instances that have opted to share their data with GitLab. So, to calculate estimated usage, the Data team has developed an algorithm to predict usage for thos instances who have disabled their usage ping.

The below section explains the first attempt to estimate xMAU.

### Current Methodology

**What we know**

* The number of active subscriptions per month
* The number of active subscriptions that send GitLab usage ping data each month
* The release date (or month) for each specific xMAU counter in the usage ping. For example, we know that the `merge_requests_users` which is the GMAU of the Create - Source Code Group was released in version 12.9

**What we don't know**

* Number of Active Free Instances

**What we can do**

Let's discuss a real-life example. The counter used as SMAU for Dev:Create stage is `action_monthly_active_users_project_repo`. It was released on version 13.3. To calculate the Estimated SMAU we follow the following process:

* Calculate recorded GMAU split by delivery
* Calculate per month 
  * For a given month, let's say there were 3500 out of 5000 Subscriptions that sent GitLab usage ping data
  * Among them we split between subscriptions that are on a version 13.3+, those that are 13.2- and those that don't share data.
  * [This SiSense chart displays the split per month](https://app.periscopedata.com/app/gitlab/602123/Data-For-Product-Managers:-Supporting-Dashboard?widget=10065654&udv=953103)
* We get from the chart above a % of subscriptions that sent us data and that are on 13.4 or above out of all active subscriptions
* We then deduce that Estimated SMAU = Recorded SMAU / % on 13.3

Since counters are released on different GitLab version, the estimation is customised from one counter to another. 

This number may be used to estimate xMAU. However there are several improvements that can be made to the algorithm:

* Use the sum of the seat quantity instead of the number of subscriptions.
* Break down the estimator per plan (current problem: a subscription can have 2 instances from 2 different product tiers)
* Improve how we estimate Core adoption

The table below explains for each stage how we calculate the estimated xMAU and the estimated uplift from the recorded Self-Managed xMAU.

<br>
<embed width="100%" height="400px" src="<%= signed_periscope_url(chart: 10461005, dashboard: 789044, embed: 'v2') %>">

