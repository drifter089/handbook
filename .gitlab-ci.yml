# NOTE: Static Sites often want to optimize for fast build and deploy
#       pipeline times, so changes are published as quickly as possible.
#       Therefore, this default config includes optional variables, settings,
#       and caching, which help minimize job run times. For example,
#       disabling support for git LFS and submodules. There are also retry
#       and reliability settings which help prevent false build failures
#       due to occasional infrastructure availability problems. These are
#       all documented inline below, and can be changed or removed as
#       necessary, depending on the requirements for your repo or project.

###################################
#
# GENERAL/DEFAULT CONFIG:
#
###################################

stages:
  - prepare
  - deploy
  - test
  - notify
  - cleanup

include:
  - template: Security/Secret-Detection.gitlab-ci.yml

default:
  interruptible: true # All jobs are interruptible by default
  # The following 'retry' configuration settings may help avoid false build failures
  #  during brief problems with CI/CD infrastructure availability
  retry:
    max: 2 # This is confusing but this means "3 runs at max".
    when:
      - unknown_failure
      - api_failure
      - runner_system_failure
      - job_execution_timeout
      - stuck_or_timeout_failure

variables:
  # NOTE: The following PERFORMANCE and RELIABILITY variables are optional, but may
  #       improve performance of larger repositories, or improve reliability during
  #       brief problems with CI/CD infrastructure availability

  ### PERFORMANCE ###
  # GIT_* variables to speed up repo cloning/fetching
  GIT_DEPTH: 10
  # Disabling LFS and submodules will speed up jobs, because runners don't have to perform
  # the submodule steps during repo clone/fetch. These settings can be deleted if you are using
  # LFS or submodules.
  GIT_LFS_SKIP_SMUDGE: 1
  GIT_SUBMODULE_STRATEGY: none

  ### RELIABILITY ###
  # Reduce potential of flaky builds via https://docs.gitlab.com/ee/ci/yaml/#job-stages-attempts variables
  GET_SOURCES_ATTEMPTS: 3
  ARTIFACT_DOWNLOAD_ATTEMPTS: 3
  RESTORE_CACHE_ATTEMPTS: 3
  EXECUTOR_JOB_SECTION_ATTEMPTS: 3

.security-scanning: &security-scanning-rules
    if: '$CI_MERGE_REQUEST_IID || $CI_COMMIT_TAG'

.hugo:
  image: registry.gitlab.com/pages/hugo/hugo_extended:0.111.3
  stage: deploy
  needs: []
  script:
    - apk update
    - apk upgrade
    - apk add go npm yq curl coreutils
    - ./scripts/update-counts.sh
    - ./scripts/sync-data.sh
    - npm ci
    - hugo
  rules:
    - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH
  artifacts:
    paths:
      - public

###################################
#
# DEPLOY STAGE
#
###################################

pages-review:
  extends: [.hugo]
  rules:
    - if: $CI_MERGE_REQUEST_IID
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    # There is no predefined CI variable that is formatted quite right
    # neither $CI_PAGES_URL nor $CI_JOB_URL have /-/ directly after the hostname
    url: https://gitlab-com.gitlab.io/-/content-sites/handbook/-/jobs/$CI_JOB_ID/artifacts/public/index.html
    on_stop: stop-pages-review
  variables:
    HUGO_ENVIRONMENT: review
    RUN_TYPE: MR

stop-pages-review:
  image: busybox
  stage: cleanup
  script:
    - echo "stop review app"
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - if: $CI_MERGE_REQUEST_IID
      when: manual
      allow_failure: true
  variables:
    GIT_STRATEGY: none

pages:
  extends: [.hugo]
  rules:
    # Only run the deploy on the default branch. If you want to deploy from Merge Request branches,
    # you can use Review Apps: https://docs.gitlab.com/ee/ci/review_apps
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $SCHEDULED_DEPLOY == "true"'

####################################
##
## TEST STAGE
##
####################################

markdownlint:
  image:
    name: davidanson/markdownlint-cli2:0.4.0
    entrypoint: ["/bin/sh", "-c"]
  stage: test
  needs: []
  before_script:
    - npm install markdownlint-cli2-formatter-codequality markdownlint-cli2-formatter-pretty
  script:
    - ./scripts/lint-custom.sh
    - markdownlint-cli2 "content/**/*.md"
  rules:
    - <<: *security-scanning-rules
  artifacts:
    when: always
    expire_in: 1 month
    paths:
      - markdownlint-cli2-codequality.json
    reports:
      codequality: markdownlint-cli2-codequality.json

####################################
##
## NOTIFY STAGE
##
####################################

post_comment_on_failure:
  needs: ["markdownlint"]
  when: on_failure
  stage: notify
  image:
    name: gitlab/glab
    entrypoint: ["/bin/sh", "-c"]
  script:
    - apk add yq
    - |
      echo "## ⚠️ Pipeline Failure - Markdown Lint Errors" > /tmp/msg
      echo "Markdown Lint has reported errors and as a result the pipeline has failed.  Once the pipeline completes you'll find the code quality report above which can link you to where the error is in your code.  Additionally below you'll find a table of the errors.  The table has links to the markdown lint rules so you can find more information on how to fix the issue(s)." >> /tmp/msg
      echo "" >> /tmp/msg
      echo "| Rule | File | Line | Error | Help |" >> /tmp/msg
      echo "|------|------|------|-------|------|" >> /tmp/msg
      for i in $(seq 0 $(($(yq 'length' markdownlint-cli2-codequality.json -o yaml)-1))); do
          ERROR=$(yq ".[$i].check_name" markdownlint-cli2-codequality.json -o yaml | cut -d '/' -f 1)
          DESCRIPTION=$(yq ".[$i].description" markdownlint-cli2-codequality.json -o yaml | cut -d ':' -f 2-)
          URL="https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md#$ERROR"
          FILE=$(yq ".[$i].location.path" markdownlint-cli2-codequality.json -o yaml)
          LINE=$(yq ".[$i].location.lines.begin" markdownlint-cli2-codequality.json -o yaml)
          LOC="https://gitlab.com/gitlab-com/content-sites/handbook/-/blob/$CI_COMMIT_SHA/$FILE#L$LINE"
          echo "| [$ERROR]($URL) | [$FILE]($LOC) | [$LINE]($LOC) | $DESCRIPTION | [➡️]($URL) |" >> /tmp/msg
      done
      echo "" >> /tmp/msg
      echo "If you need more help please reach out on Slack in [#mr-buddies](https://gitlab.slack.com/archives/CLM8K5LF4) or [#handbook](https://gitlab.slack.com/archives/C81PT2ALD)." >> /tmp/msg
    - glab auth login -t $MR_UPDATE_TOKEN
    - glab mr note $CI_MERGE_REQUEST_IID -m "$(cat /tmp/msg)"
  rules:
  - <<: *security-scanning-rules

secret_detection:
  needs: []
  dependencies: [] # Don't download artifacts, especially `./public/`
  rules:
    - <<: *security-scanning-rules

