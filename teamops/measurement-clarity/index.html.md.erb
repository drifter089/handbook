---
layout: handbook-page-toc
title: "TeamOps - Measurement Clarity"
description: TeamOps - Measurement Clarity
twitter_image: "/images/opengraph/all-remote.jpg"
twitter_image_alt: "GitLab remote team graphic"
twitter_site: "@gitlab"
twitter_creator: "@gitlab"
---

{::options parse_block_html="true" /}

## On this page
{:.no_toc}

- TOC
{:toc}

![GitLab TeamOps teamwork illustration](/handbook/teamops/images/teamops-illustration_teamwork_purple.png)
{: .shadow.medium.center}

This page is about one of the four Guiding Principles of TeamOps: Measurement Clarity. To learn more about the other three Principles, return to the main TeamOps page for a [complete overview of TeamOps](/teamops/), or enroll in the free [TeamOps course](https://levelup.gitlab.com/learn/course/teamops).
{: .alert .alert-info}

_Outdated workforce supervision tactics often trigger bias and presenteeism, so results must be uniquely recorded, managed, and supported for the accurate tracking and evaluation of productivity._

Like Peter Drucker famously said, “If you can't measure it, you can't manage it.” But for many generations of business, the primary success metric was physical presence – a team member needed to be in a certain building in order to be at work.

TeamOps supports the revolution that work is a verb, not a noun. Therefore, teams should rely on measuring productivity, value, and results without depending on physical supervision. Reprioritizing what is measured, how it’s measured, and when it’s measurement enables a higher frequency of success analysis, higher accountability to objectives, lower workforce discrimination, and a wider reach of company communication.

Action tenets of strengthening measurement clarity, including real-world examples of each, are below.


## Transparent measurements

Conventional management philosophies glorify metrics, which is a nonspecific term that often lacks connection to objectives, mission, values, workflows, strategy, or a shared reality. TeamOps prefers [Key Performance Indicators (KPIs)](/company/kpis/), which are smaller increments linked to [Objectives and Key Results](/company/okrs/) (OKRs) that, well, _indicate performance_ and offer greater context on daily operations and the relevance of ongoing productivity to a function or the entire company.

While smaller than OKRs, KPIs are not dependent on them. In fact, the two should be symbiotic in nature – informing and influencing each other for greater operational visibility, tracking accuracy, and team empowerment. If you're not creating OKRs to improve KPIs, then you're either missing KPIs or you have the wrong OKRs.

Crucially, KPIs for each function are [transparently shared](/handbook/values/#findability) across the organization. This enables everyone to contribute by creating visibility between departments.

<details>
   <summary markdown="span">Example of transparent measurements</summary>

   **Example 1:** [Chief Executive Officer OKR and KPIs](/company/okrs/fy23-q3/)

   In Q3-FY23, a CEO OKR is [Improve user and wider-community engagement](/company/okrs/fy23-q3/). This is the *initiative* to improve a series of KPIs, a subset of which are documented below: 
   1. Evolve the resident contributor strategy by conducting 5 customer conversations with current “resident contributors” in seat
   2. Certify 1,000 team members and 10,000 wider-community members in TeamOps 
   3. Enhance Corporate Processes and Successful Corporate Development Integration & Prospecting 

   These are documented in a tool that is accessible to the entire organization. Critically, any team member can see any other functions OKRs and KPIs for the quarter, reinforcing the [value of transparency](/handbook/values/#transparency).
</details>


## Measure results, not hours

The goal of every operational model is to optimize the efficiency of producing results, but conventional teams make a critical error when they conflate “efficiency” to mean “speed.” This means time becomes the highest priority of the team, and working hours become a primary success metric for the organization.

In organizations powered by TeamOps, team members understand that the root of “productivity” is “to produce,” and therefore focus on [executing business results](/handbook/values/#measure-results-not-hours), rather than executing on [presenteeism](https://language.work/research/killing-time-at-work/). All success measurements should be based on outputs, not inputs.

Note that outputs aren’t just tangible deliverables. Results include any value to the shared reality that a team member contributes: helping a teammate, satisfying a customer, shipping code, brainstorming a new idea, writing a revision, or researching a competitor. All quantifiable reports, messages, insights, or submissions are evidence of time well spent.

<details>
   <summary markdown="span">Example of measure results, not hours</summary>

   **Example 1:** [Measuring impact of GitLab's 10 year campaign](https://gitlab.com/gitlab-com/marketing/corporate_marketing/corporate-marketing/-/issues/5507)
   
   A cross-functional effort was required to produce the `10 Years of GitLab` integrated marketing campaign and [associated website](/ten/). A GitLab issue was established to explicitly define [elements to be tracked and measured](https://gitlab.com/gitlab-com/marketing/corporate_marketing/corporate-marketing/-/issues/5507) in order to provide an impact report. By focusing on results over hours spent (or if a given team member was online at a certain time, or in a certain office), everyone involved in the project can focus energy on execution.
</details>


## Prioritize due dates over scope

Although [time is not a success measurement](/handbook/teamops/measurement-clarity/#measure-results-not-hours), TeamOps requires due dates. This is not a means to create unnecessary rigidity or measure duration of contributions, but to force mechanisms that enable teams to execute on decisions and require accountability.

A TeamOps organization will always [set a due date](/handbook/values/#set-a-due-date), and if necessary, will cut scope to meet the due date rather than postpone the date. This forces them to think [iteratively](/handbook/teamops/measurement-clarity/#iteration), by saving some of the scope for a future objective (or future execution), while limiting the loss of momentum.

<details>
   <summary markdown="span">Example of prioritize due dates over scope</summary>

   **Example 1:** [Maintaining a monthly release cadence for 10+ years](/releases/)

   As of 2022-12-01, GitLab has [shipped a monthly product release](/releases/) for 134 consecutive months. That's over 10 years! A decade of [consistent execution](/blog/2018/11/21/why-gitlab-uses-a-monthly-release-cycle/) is made possible by [cutting scope](/handbook/values/#set-a-due-date) instead of pushing ship dates.
</details>


## Iteration

Executing on a decision should not be binary, nor a one-time event. TeamOps reframes execution as an ongoing series of [iterations](/handbook/values/#iteration) – small, compounding results – each one worthy of celebration. This encourages [smaller steps](/handbook/values/#move-fast-by-shipping-the-minimal-viable-change), which are more amenable to feedback, course correction, and easier to deliver. By breaking decisions down into manageable components, results are more feasible.

In conventional organizations, there's often inherent pressure to present a complete and polished project, document, or plan. This expectation slows progress and expends valuable time that could be used to exchange multiple rounds of feedback on smaller changes.

A key aspect of TeamOps is incorporating [iteration](/handbook/values/#iteration) into every process and decision with a [low level of shame](/handbook/values/#low-level-of-shame). This means doing the smallest viable and valuable thing, and getting it out quickly for feedback. Despite the initial discomfort that comes from sharing the [minimal viable change (MVC)](/handbook/values/#minimal-viable-change-mvc), iteration enables faster execution, a shorter feedback loop, and the ability to course-correct sooner.

This philosophy mirrors the GitLab product from a cycle-time standpoint. GitLab is built to reduce the time between making a decision and getting the result to market. Iteration enables cycle time reduction to be applied in day-to-day decision making for any project, result, team, or company in any industry.

_Tip: To empower even more of your team to make fast decisions through iteration, consider hosting [Iteration Office Hours](https://www.youtube.com/watch?v=2eA7-E950ps)._

<details>
   <summary markdown="span">Example of iteration</summary>

   **Example 1:** [Iterating on promotional videos to launch TeamOps](https://gitlab.com/gitlab-com/marketing/inbound-marketing/global-content/digital-production/-/issues/319)

   In the development of TeamOps, our team at GitLab aspired to produce [two high-quality videos](https://gitlab.com/gitlab-com/marketing/inbound-marketing/global-content/digital-production/-/issues/319) to introduce the first, internal iteration of this certification. When it became clear that TeamOps's brand identity would be changing in the coming weeks, we decided to produce only one video — an example of [Minimal Viable Change (MVC)](/handbook/values/#minimal-viable-change-mvc) — and iterate as new information came in. This showcases a maturity in embracing iteration. It celebrates the [boring solution](/handbook/values/#boring-solutions) (one video, the minimum required to inform GitLab team members), and enabled faster decisions throughout the launch phase.

   **Example 2:** [Adding an MVC GitLab Citation Index to GitLab for Education homepage](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/69665/)

   In a conventional organization, a revised homepage could be seen as binary. It's either complete, or not. [This merge request](https://gitlab.com/gitlab-com/www-gitlab-com/-/merge_requests/69665/) details a minimum viable change (MVC) to add one element to the [GitLab for Education](/solutions/education/) homepage. In the comment thread, GitLab team members agree that this iteration moves the page one step closer to an ideal state. By embracing and celebrating each iteration *as* execution, it enables team members to accelerate execution on other projects rather than being stuck on a prior project.
</details>


---

Restart the TeamOps model by learning about [TeamOps - Shared Reality](/handbook/teamops/shared-reality/), or return to the [TeamOps homepage](/teamops/).
{: .alert .alert-info}
