---
layout: markdown_page
title: Tiering Guidance for Features
---

On this page

{:.no_toc}

- TOC
{:toc}

## How to make pricing tier decisions

Product Managers are responsible for helping determine and maintain the optimal tier for their features. To accomplish this, Product Managers should leverage the supporting resources below to understand and implement the strategy, philosophy and various components of GitLab's pricing model.

### Pricing Tiers

The [CEO is the DRI for pricing and tiers](/company/pricing/#departments). This includes any changes that directly impact how we charge customers under our licensing model, such as a [change to how we handle active users](https://gitlab.com/gitlab-org/gitlab/issues/22257). GitLab leverages a [buyer-based *open core*](https://about.gitlab.com/company/pricing/#buyer-based-open-core) pricing model. Please review the entirety of the [stewardship](/company/stewardship/) and [pricing model](/company/pricing/) pages before making any determinations as to which tier a given feature should go in.

### Have a laddered tiering strategy that leverages all three tiers

Ideally each product area has a laddered tiering strategy, where incremental value is contained in each tier.  This enables us to drive broad usage in Free, and then drive uptiers to Premium and Ultimate as customers increase in their sophistication of using the given product area.  When considering what offer in open source always review what additional features can be monetized later. Open source drives popularity of the main feature, but it's important to understand up front how we intend to leverage that usage and exposure to drive incremental ARR later in higher tiers.

#### What goes in what paid tier

Our [stewardship principles](/company/stewardship/) determine whether something belongs in a
paid tier. The [likely buyer](/company/pricing/#buyer-based-open-core) determines which tier.

#### Determining the tier of a new feature

When making a decision on the tier for a new feature, please refer to the [pricing page](/company/pricing/) for guidance. Be sure to consider documenting your rationale for the decision in the issue description, including a reference to our [stewardship page](/company/stewardship/) when appropriate.

Please indicate the applicable tier for an issue by applying the label associated with the tier (e.g. `GitLab Ultimate`). Ensure this is defined before feature development begins.

#### Moving features between tiers or other pricing changes

To propose changing a feature tier or making any other change that impacts how we charge customers, please follow the process and template on the [pricing page](/company/pricing/#changing-tiers-and-pricing-changes). This ensures collaboration and alignment with key GitLab stakeholders and maintenance of `features.yml` as SSOT.

#### Paid Tier requirements

All Premium, and Ultimate features must:

- Work easily for our customers that self-host GitLab. i.e. Their
licenses need not be updated and the new feature is default-on for the
instance.
- Work with GitLab.com Premium / Ultimate subscriptions. This means there has to be
some way of toggling or using the feature at a namespace level.
- Have documentation.
- Be featured on [products]/(stages-devops-lifecycle/) and [DevOps tools](/devops-tools/) at launch.

Should product managers have any questions when making tier decisions, they should collaborate with their manager, [product leadership](/handbook/product/product-leadership/), or the CEO for clarification. The most up to date reference for pricing DRIs can be found in the [feature tier or pricing change template](https://gitlab.com/gitlab-com/Product/-/blob/main/.gitlab/issue_templates/Feature-Tier-Or-Pricing-Change.md).

### Relevant personas

It can be challenging to find a the balance between users' needs and buyers' decision drivers. Product Managers should frequently engage with the walk through of GitLab's [tiers and personas](https://about.gitlab.com/company/pricing/#three-tiers) to remain knowledgable on which *buyer* personas are most relevant to each tier and why.  It's important to focus on only the buyer persona when making tiering decisions.

### Reasons for upgrade

Multiple considerations go into customers' purchase decisions. Here are some various resources product managers can visit to reference various data points for analysis:

- [Post purchase surveys](https://about.gitlab.com/direction/product-operations/#post-purchase)

## How to consider impact to revenue

### Driving revenue 

Product managers should be familiar with and leverage strategies and tactics for their own stage as well as across GitLab's other stages in accordance with GitLab's pricing model. Here are some helpful examples:

- [Create stage's use of popularity to drive revenue](https://about.gitlab.com/direction/create/#pricing)
- [Plan stage's balance between usage and enterprise adoption](https://about.gitlab.com/direction/plan/#plan-stage-pricing-strategy)
- [Enablement section's balance of ease of use and scale](https://about.gitlab.com/direction/enablement/#pricing)

### Understanding Investment 

GitLab currently has three ways of allocating investment across product as detailed in [investment types](https://about.gitlab.com/handbook/product/investment/#investment-types).

### Learning opportunities
 
Pricing adjustments within a buyer-based model can be challenging and sometimes feel counterintuitive. Below are some examples of strategies/tactics that have succeeded and failed that we can learn from:

üëç

 - [Move Feature Flags to Core](https://gitlab.com/gitlab-org/gitlab/-/issues/212318)
 - With pressure from the market that our SAST features were just open source tools and any customer could just run those themselves for free, we moved SAST analyzers to core. We were able to turn this criticism into a community feature which has increased our community contributions, provided an entry point for [all customers to try our security tooling](https://docs.gitlab.com/ee/user/application_security/sast/#making-sast-analyzers-available-to-all-gitlab-tiers) and even create some in-product upgrade paths to Ultimate. [Epic](https://gitlab.com/groups/gitlab-org/-/epics/2098), [Internal Discussions](https://gitlab.com/gitlab-com/Product/-/issues/315), [Release Post](https://about.gitlab.com/releases/2020/08/22/gitlab-13-3-released/#sast-security-analyzers-available-for-all)
  - The [Kubernetes Agent move to core](https://gitlab.com/gitlab-com/Product/-/issues/2067) generated great discussions on how competitive pressure and the desire for feedback can challenge the buyer-based tiering

üëé

 - Pricing the [MR Diff code quality annotations](https://gitlab.com/gitlab-org/gitlab/-/issues/2526) into Ultimate was something that got some resistance initially since the feature would be used by developers. The feature fits into the Transformation type sale where a team is trying to shift code quality to the left and bring it to the full code review process.
 - Putting the [Accessibility MR Widget](https://docs.gitlab.com/ee/user/project/merge_requests/accessibility_testing.html) into Core was about getting some usage for the new category and to learn what additional features customers wanted.
 

 


