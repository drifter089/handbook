---
layout: handbook-page-toc
title: "GitLab Security Essentials Hands On Guide- Lab 1"
description: "This Hands On Guide Lab is designed to walk you through the lab exercises used in the GitLab Security Essentials course."
---
# GitLab Security Essentials Hands On Guide- Lab 1
{:.no_toc}

## On this page
{:.no_toc .hidden-md .hidden-lg}

- TOC
{:toc .hidden-md .hidden-lg}


## LAB 1- CREATE A PROJECT AND RUN A SAST SCAN

Application Security Testing (SAST) allows you to analyze your source code for known vulnerabilities. GitLab checks the SAST report and compares the found vulnerabilities between the source and target branches. The purpose of this lab is to run a SAST to identify potential security vulnerabilities in your pipeline.

### Create a Project
1. Navigate to **Groups** > **Your Groups**
2. Navigate to **Training Users** and expand the arrow to the left of Training Users, your training login will be the first one under your class session.
3. Navigate to the **New Project** button and click it.
4. Click on **Create from Template** and then click on the **NodeJS Express Use Template** button.
5. In the Project name dialog box, enter “***{lastname} SecurityProject1*”**. Optionally you may include a few notes in the Project Description Dialog Box.
6. Under Visibility Level, click the radio button for **Private**.
7. Click **Initialize repository with a README** checkbox and then click the green **Create project** button.
Note: If you do not initialize your repository with a README, you will have a stripped down Git repo, that you will need to create content to bring it into existence.

### Add a .gitlab-ci.yml File
1. For this course, we will not need the *.gitpod.yml* file that has been added by the template, click on the file, then click the **Delete** button.
2. Navigate to the **New File** button and click on it.
3. In the file name dialog box type **“*.gitlab-ci.yml”***
4. In order to get started, we are going to add 3 basic stages, build, test, and deploy. Copy the text from the following [snippet](https://gitlab-core.us.gitlabdemo.cloud/training-sample-projects/ps-classes/gitlab-security-essential-demos/dast-demo-project/-/snippets/1779) and paste it into your YAML file.
5. Click the green **Commit Changes** button.
6. Ensure your pipeline configuration is valid, and then move onto the next step.
7. Click on **Web IDE** to begin editing your .gitlab-ci.yml file.
8. In a separate window, open the GitLab docs website.

###Add SAST template to the YML file
Note: For this lab, please pull up the following [Docs article](https://docs.gitlab.com/ee/user/application_security/sast/#configure-sast-manually) to assist you. This page displays instructions for how to include SAST in your own CI. The page also displays GitLab supported languages and frameworks.

1. On the Docs page, scroll down and locate the **Configure SAST Manually** section.
2. Copy the following line:
include:
- template: Security/SAST.gitlab-ci.yml
3. Navigate back to the GitLab dashboard and locate your .gitlab-ci.yml file
4. **Paste the code** just copied below the sections leaving a space between blocks of code. Note: ensure this lines up with the template.
5. Click the blue **Commit** button to begin running your pipeline.
6. Add a message for your change.
7. Click **Commit to master branch**.  Note: We don’t want to create a new branch
8. Click the blue **Commit** button to begin running your pipeline.
9. Add a message for your change and click **Commit to master branch**.
Note: We don’t want to create a new branch

### View the SAST scanning results
1. Navigate to **CI/CD** in the left pane  Note the security scan is running.
2. Click on your pipeline - > Click on the **Security & Compliance tab** -> Navigate to  the **Vulnerability Report** tab -> Click **Errors unhandled** in the report field.
3. On the Errors Unhandled pop-up, review the vulnerability information and click the **Cancel** button.
4. On the left-hand panel, click the **Security and Compliance** section and review the **Security Dashboard** that appears.
5. Review the different information displayed, the status, severity, and scanner types shown in the Dashboard.
6. Once you have reviewed all of the information, click on the **Errors Unhandled** item in the vulnerabilities detected box and review the pop-up box that appears.
7. Since we are going to dismiss this vulnerability, click the appropriate reason from the drop-down that appears and click the **Dismiss Selected** button.
8. Navigate to **Security & Compliance > Configuration >  Static Application Security Testing (SAST)**- ensure that the SAST scanner is enabled.
9. Click the **Configure** button in the Manage column to view the specific configuration options available for your SAST Scanner. Once you have reviewed the options available, you can close out of this section.

### SUGGESTIONS?

If you wish to make a change to our Hands on Guide for GitLab Security Essentials- please submit your changes via Merge Request!

